name: "CI"

on:
  workflow_dispatch: 
  pull_request:
    branches: [main]
    
jobs:
  test-macos:
    name: Test (MacOS)
    runs-on: macos-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            6.0.x
            7.0.x
      - name: Build solution
        run: dotnet build /p:NetCoreOnly=True --configuration "Release"
      - name: Run tests
        run: dotnet test --no-build --collect:"XPlat Code Coverage" --logger trx --results-directory "TestResults"
      - name: Upload test results (MacOS)
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: Test results (MacOS)
          path: TestResults
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: Code coverage (MacOS)
          path: "**/coverage.cobertura.xml"

  test-ubuntu:
    name: Test (Ubuntu)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            6.0.x
            7.0.x
      - name: Build solution
        run: dotnet build /p:NetCoreOnly=True --configuration "Release"
      - name: Run tests
        run: dotnet test --no-build --collect:"XPlat Code Coverage" --logger trx --results-directory "TestResults"
      - name: Upload test results (Ubuntu)
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: Test results (Ubuntu)
          path: TestResults
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: Code coverage (Ubuntu)
          path: "**/coverage.cobertura.xml"

  test-windows:
    name: Test (Windows)
    runs-on: windows-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            6.0.x
            7.0.x
      - name: Build solution
        run: dotnet build /p:NetCoreOnly=True --configuration "Release"
      - name: Run tests
        run: dotnet test --no-build --collect:"XPlat Code Coverage" --logger trx --results-directory "TestResults"
      - name: Upload test results (Windows)
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: Test results (Windows)
          path: TestResults
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: Code coverage (Windows)
          path: "**/coverage.cobertura.xml"
        
  test-net-framework:
    name: Test (.NET Framework)
    runs-on: windows-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
        with:
          fetch-depth: 0
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1
      - name: Setup VSTest
        uses: darenm/Setup-VSTest@v1
      - name: Navigate to Workspace
        run: cd $GITHUB_WORKSPACE
      - name: Build solution
        run: msbuild.exe Testably.Abstractions.FluentAssertions.sln /p:NetFrameworkOnly=True /p:platform="Any CPU" /p:configuration="Release" -t:restore,build -p:RestorePackagesConfig=true
      - name: Run tests
        run: vstest.console.exe .\Build\Tests\Testably.Abstractions.FluentAssertions.Tests\net48\Testably.Abstractions.FluentAssertions.Tests.dll /Logger:trx /ResultsDirectory:TestResults
      - name: Upload test results (.NET Framework)
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: Test results (.NET Framework)
          path: TestResults
